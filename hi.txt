#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <pthread.h>
#include <errno.h>
#include <string.h>

volatile int done;
volatile int thread1done;
volatile int thread2done;

pthread_t mainthread;


void signal_handler(int signum){

	switch(signum){
	case SIGINT: //any thread
		printf("caught SIGINT\n");
		if(mainthread == pthread_self()){
			printf("main thread caught SIGINT, good case\n");
		}else{
			printf("other thread caught SIGINT\n");
			pthread_kill(mainthread,SIGUSR1);
		}
		break;
	case SIGUSR1: // only main 
		printf("caught SIGUSR1\n");
		if(mainthread == pthread_self()){
			done = 1;
		}
	
	}
	return;
}

void* thread_func(void* args){
	while(1){
		if(thread1done == 1){
			break;
		}
	}
	pthread_exit(NULL);

}

int main(int argc, char** argv){
	mainthread = pthread_self();

	struct sigaction sa;
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = SA_RESTART;
	sa.sa_handler = signal_handler;
	if(sigaction(SIGINT,&sa,NULL)){
		printf("Errno:%d Message:%s\n",errno, strerror(errno));
		exit(2);
	}
	if(sigaction(SIGUSR1,&sa,NULL)){
		printf("Errno:%d Message:%s\n",errno, strerror(errno));
		exit(2);
	}
	
	pthread_t tid1;//, tid2;
	pthread_create(&tid1, NULL, thread_func, NULL);
	//pthread_create(&tid2, NULL, thread_func, NULL);

	while(1){
		if(done == 1){
			printf("captured sigusr1\n");
			break;
		}
	}


	return 0;

}
